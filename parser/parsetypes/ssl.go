package parsetypes

import (
	"github.com/activecm/rita/config"
)

type (
	// SSL provides a data structure for bro's connection data
	SSL struct {
		// TimeStamp of this connection
		TimeStamp int64 `bson:"ts" bro:"ts" brotype:"time"`
		// UID is the Unique Id for this connection (generated by Bro)
		UID string `bson:"uid" bro:"uid" brotype:"string"`
		// Source is the source address for this connection
		Source string `bson:"id_orig_h" bro:"id.orig_h" brotype:"addr"`
		// SourcePort is the source port of this connection
		SourcePort int `bson:"id_orig_p" bro:"id.orig_p" brotype:"port"`
		// Destination is the destination of the connection
		Destination string `bson:"id_resp_h" bro:"id.resp_h" brotype:"addr"`
		// DestinationPort is the port at the destination host
		DestinationPort int `bson:"id_resp_p" bro:"id.resp_p" brotype:"port"`
		// Version
		Version string `bson:"version" bro:"version" brotype:"string"`
		// Cipher
		Cipher string `bson:"cipher" bro:"cipher" brotype:"string"`
		// Curve
		Curve string `bson:"curve" bro:"curve" brotype:"string"`
		// ServerName
		ServerName string `bson:"server_name" bro:"server_name" brotype:"string"`
		// Resumed
		Resumed bool `bson:"resumed" bro:"resumed" brotype:"bool"`
		// LastAlert
		LastAlert string `bson:"last_alert" bro:"last_alert" brotype:"string"`
		// NextProtocol
		NextProtocol string `bson:"next_protocol" bro:"next_protocol" brotype:"string"`
		// Established
		Established bool `bson:"established" bro:"established" brotype:"bool"`
		// CertChainFuids
		CertChainFuids []string `bson:"cert_chain_fuids" bro:"cert_chain_fuids" brotype:"vector[string]"`
		// ClientCertChainFuids
		ClientCertChainFuids []string `bson:"client_cert_chain_fuids"  bro:"client_cert_chain_fuids" brotype:"vector[string]"`
		// Subject
		Subject string `bson:"subject"  bro:"subject" brotype:"string"`
		// Issuer
		Issuer string `bson:"issuer"  bro:"issuer" brotype:"string"`
		// ClientSubject
		ClientSubject string `bson:"client_subject"  bro:"client_subject" brotype:"string"`
		// ClientIssuer
		ClientIssuer string `bson:"client_issuer"  bro:"client_issuer" brotype:"string"`
		// ValidationStatus
		ValidationStatus string `bson:"validation_status"  bro:"validation_status" brotype:"string"`
	}
)

//TargetCollection returns the mongo collection this entry should be inserted
//into
func (in *SSL) TargetCollection(config *config.StructureTableCfg) string {
	return config.SSLTable
}

//Indices gives MongoDB indices that should be used with the collection
func (in *SSL) Indices() []string {
	return []string{"$hashed:id_orig_h", "$hashed:id_resp_h"}
}
